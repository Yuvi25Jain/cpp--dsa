#include <iostream>

using namespace std;
/* First and last occurance in an sorted array*/

int firstOccur(int arr[], int n, int k){
    int s=0 , e = n-1;
    int m = s+(e-s)/2;
    int ans = -1;
    while(s<=e){
        if(arr[m]==k){
            ans = m; // storing the value of mid in ans.
            e = m-1; // will search in left part.
        }
        else if(k > arr[m]){
            s = m+1;
            
        }
        else if(k < arr[m]){
            e = m-1;
        }
        m = s +(e-s)/2;
    }
    return ans;
}
int lastOccur(int arr[], int n, int k){
    int s=0 , e = n-1;
    int m = s+(e-s)/2;
    int ans = -1;
    while(s<=e){
        if(arr[m]== k){
            ans = m; // storing the value of mid in ans.
            s= m+1; // will search in right part.
        }
        else if(k > arr[m]){
            s = m+1;
            
        }
        else if(k < arr[m]){
            e = m-1;
        }
        m = s +(e-s)/2;
    }
    return ans;
}

int main(){
    int odd[7] = {1,2,3,2,3,4,5};
    int even[6] = {1,2,3,2,3,4};
    
    cout<<"the first occurence of given key in the sorted array is:  "<< firstOccur(odd, 7,3)<<endl;
    cout<<"the last occurence of given key in the sorted array is:  "<< lastOccur(odd, 7,3)<<endl;
    
    cout<<"the first occurence of given key in the sorted array is:  "<< firstOccur(even, 6,4)<<endl;
    cout<<"the last occurence of given key in the sorted array is:  "<< lastOccur(even,6,4)<<endl;
    
    
}



//leetcode code : https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/
class Solution {
    public:
int firstOccur(vector<int>& nums, int n, int k){
    int s=0 , e = n-1;
    int m = s+(e-s)/2;
    int ans = -1;
    while(s<=e){
        if(arr[m]==k){
            ans = m; // storing the value of mid in ans.
            e = m-1; // will search in left part.
        }
        else if(k > arr[m]){
            s = m+1;
            
        }
        else if(k < arr[m]){
            e = m-1;
        }
        m = s +(e-s)/2;
    }
    return ans;
}
int lastOccur(vector<int>& nums, int n, int k){
    int s=0 , e = n-1;
    int m = s+(e-s)/2;
    int ans = -1;
    while(s<=e){
        if(arr[m]== k){
            ans = m; // storing the value of mid in ans.
            s= m+1; // will search in right part.
        }
        else if(k > arr[m]){
            s = m+1;
            
        }
        else if(k < arr[m]){
            e = m-1;
        }
        m = s +(e-s)/2;
    }
    return ans;
}





    pair<int , int>p ,vector<int> , searchRange(vector<int>& nums, int target) {
    
   object.p.first =  firstOccur(arr,n,k);
    object.p.last =  lastOccur(arr,n,k);

    return ans;
    }
};
